trigger:
  branches:
    include: ["master", "develop*", "release*", "refs/tags/*" ]
  paths:
    exclude: [ "doc", "*.md", ".gitignore" ]

jobs:
- job: GIMX_Linux
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - checkout: self # self represents the repo where the initial Pipelines YAML file was found
    clean: false  # if true, run `execute git clean -ffdx && git reset --hard HEAD` before fetching
    fetchDepth: 1  # the depth of commits to ask Git to fetch; defaults to no limit
    lfs: true  # whether to download Git-LFS files; defaults to false
    submodules: true  # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules; defaults to not checking out submodules
    #path: string  # path to check out source code, relative to the agent's build directory (e.g. \_work\1); defaults to a directory called `s`
    persistCredentials: false  # if 'true', leave the OAuth token in the Git config after the initial fetch; defaults to false
  - script: |
      sudo apt-get update
      sudo apt-get install libwxgtk3.0-dev libbluetooth-dev libxml2-dev libusb-1.0-0-dev libncursesw5-dev gettext libmhash-dev libcurl4-gnutls-dev libxi-dev libx11-dev
    displayName: 'Add Linux dependencies'
    continueOnError: false
    
  - script: |
      make -f Makefile
    displayName: 'Build Program'
    continueOnError: false

  # Archive Files
  # Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)' 
      includeRootFolder: false
      archiveType: 'tar' # Options: zip, 7z, tar, wim
      tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
      archiveFile: '$(Build.ArtifactStagingDirectory)/gimx-linux.tar.gz'
      #replaceExistingArchive: true

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      #pathtoPublish: '$(Build.SourcesDirectory)' 
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'gimx-linux' 
      publishLocation: 'Container' # Options: container, filePath
      #targetPath: # Required when publishLocation == FilePath
      parallel: true # Optional
      #parallelCount: # Optional

- job: GIMX_Windows
  pool:
    vmImage: 'windows-2019'
  steps:
  - checkout: self # self represents the repo where the initial Pipelines YAML file was found
    clean: false  # if true, run `execute git clean -ffdx && git reset --hard HEAD` before fetching
    fetchDepth: 1  # the depth of commits to ask Git to fetch; defaults to no limit
    lfs: true  # whether to download Git-LFS files; defaults to false
    submodules: true  # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules; defaults to not checking out submodules
    #path: string  # path to check out source code, relative to the agent's build directory (e.g. \_work\1); defaults to a directory called `s`
    persistCredentials: false  # if 'true', leave the OAuth token in the Git config after the initial fetch; defaults to false
  
  # Install msys2 (probably already installed so commented out)
  # - script: |
  #    choco install -y msys2
  #    pacman -Syu
  #    rem refreshenv
  #   displayName: 'Install MSYS2'
     
  - script: |
     choco install -y wxwidgets
     rem refreshenv
    displayName: 'Install wxwidgets'

  # - script: echo "##vso[task.prependpath]C:\tools\msys64"
  #   displayName: Tweak PATH for msys2
    
  # - script: echo "##vso[task.prependpath]C:\wxWidgets-3.1.2\"
  #   displayName: Tweak PATH for wxwidgets

  - script: |
      make -C %BUILD_SOURCESDIRECTORY% -j8
    displayName: 'Build Program'
    continueOnError: false

  # Archive Files
  # Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)' 
      includeRootFolder: false
      archiveType: 'zip' # Options: zip, 7z, tar, wim
      #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
      archiveFile: '$(Build.ArtifactStagingDirectory)/gimx-win_x64.zip'
      #replaceExistingArchive: true

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      #pathtoPublish: '$(Build.SourcesDirectory)'
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'gimx-windows' 
      publishLocation: 'Container' # Options: container, filePath
      #targetPath: # Required when publishLocation == FilePath
      parallel: true # Optional
      #parallelCount: # Optional

# GitHub Release https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/github-release?view=azure-devops
# Create, edit, or delete a GitHub release
#- task: GitHubRelease@0
#  inputs:
#    gitHubConnection: 
    #repositoryName: '$(Build.Repository.Name)' 
    #action: 'create' # Options: create, edit, delete
    #target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
    #tagSource: 'auto' # Required when action == Create# Options: auto, manual
    #tagPattern: # Optional
    #tag: # Required when action == Edit || Action == Delete || TagSource == Manual
    #title: # Optional
    #releaseNotesSource: 'file' # Optional. Options: file, input
    #releaseNotesFile: # Optional
    #releaseNotes: # Optional
    #assets: '$(Build.ArtifactStagingDirectory)/*' # Optional
    #assetUploadMode: 'delete' # Optional. Options: delete, replace
    #isDraft: false # Optional
    #isPreRelease: false # Optional
    #addChangeLog: true # Optional
    #compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
    #releaseTag: # Required when compareWith == LastReleaseByTag
