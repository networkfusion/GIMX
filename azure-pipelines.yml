trigger:
  branches:
    include: ["master", "develop*", "release*", "refs/tags/*" ]
  paths:
    exclude: [ "doc", "*.md", ".gitignore" ]

jobs:
- job: GIMX_Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      echo Add Linux dependencies
      sudo apt-get install libwxgtk3.0-dev libbluetooth-dev libxml2-dev libusb-1.0-0-dev libncursesw5-dev gettext libmhash-dev libcurl4-gnutls-dev libxi-dev libx11-dev
         
      #cd $BUILD_SOURCESDIRECTORY
      
      echo Build App
      make -f Makefile
    displayName: 'Build Program'
    continueOnError: false

  # Archive Files
  # Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)' 
      includeRootFolder: false
      archiveType: 'tar' # Options: zip, 7z, tar, wim
      tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
      archiveFile: '$(Build.ArtifactStagingDirectory)/gimx-linux.tar.gz'
      #replaceExistingArchive: true

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      #pathtoPublish: '$(Build.SourcesDirectory)' 
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'gimx-linux' 
      publishLocation: 'Container' # Options: container, filePath
      #targetPath: # Required when publishLocation == FilePath
      parallel: true # Optional
      #parallelCount: # Optional

#- job: GIMX_Windows
#  pool:
#    vmImage: 'windows-latest'
#  steps:
  #- script: |
  #    echo Downloading dependencies
      #curl -L https://github.com/wmcbrine/PDCurses/archive/3.9.zip --output PDCurses.zip
   # displayName: 'Download Dependencies'
   # continueOnError: false

  # Archive Files
  # Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
  #- task: ArchiveFiles@2
  #  inputs:
  #    rootFolderOrFile: '$(Build.SourcesDirectory)' 
  #    includeRootFolder: false
  #    archiveType: 'zip' # Options: zip, 7z, tar, wim
  #    #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
  #    archiveFile: '$(Build.ArtifactStagingDirectory)/gimx-win_x86.zip'
  #    #replaceExistingArchive: true

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  #- task: PublishBuildArtifacts@1
  #  displayName: Publish Build Artifacts
  #  inputs:
  #    pathtoPublish: '$(Build.SourcesDirectory)'
  #    #pathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #    artifactName: 'gimx-windows' 
  #    publishLocation: 'Container' # Options: container, filePath
  #    #targetPath: # Required when publishLocation == FilePath
  #    parallel: true # Optional
  #    #parallelCount: # Optional

# GitHub Release https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/github-release?view=azure-devops
# Create, edit, or delete a GitHub release
#- task: GitHubRelease@0
#  inputs:
#    gitHubConnection: 
    #repositoryName: '$(Build.Repository.Name)' 
    #action: 'create' # Options: create, edit, delete
    #target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
    #tagSource: 'auto' # Required when action == Create# Options: auto, manual
    #tagPattern: # Optional
    #tag: # Required when action == Edit || Action == Delete || TagSource == Manual
    #title: # Optional
    #releaseNotesSource: 'file' # Optional. Options: file, input
    #releaseNotesFile: # Optional
    #releaseNotes: # Optional
    #assets: '$(Build.ArtifactStagingDirectory)/*' # Optional
    #assetUploadMode: 'delete' # Optional. Options: delete, replace
    #isDraft: false # Optional
    #isPreRelease: false # Optional
    #addChangeLog: true # Optional
    #compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
    #releaseTag: # Required when compareWith == LastReleaseByTag
